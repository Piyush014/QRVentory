package com.dilip.qrventory.presentation.devices.components

import android.graphics.Bitmap
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import com.dilip.domain.models.device.DeviceQrs
import com.dilip.qrventory.presentation.devices.DevicesViewModel
import java.io.ByteArrayOutputStream

@Composable
@OptIn(ExperimentalMaterial3Api::class)
fun GenerateAndAddQrCode(
    rootNavController: NavController
) {
    val viewModel: DevicesViewModel = hiltViewModel()

    var deviceType by remember { mutableStateOf("") }
    var deviceSN by remember { mutableStateOf("") }
    var deviceAssignee by remember { mutableStateOf("") }
    var date by remember { mutableStateOf("") }
    var location by remember { mutableStateOf("") }
    var qrCodeGenerated by remember { mutableStateOf<Bitmap?>(null) }

    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier.padding(horizontal = 20.dp),
        verticalArrangement = Arrangement.SpaceEvenly,
    ) {
        // Form Inputs
        TextField(
            value = deviceType,
            onValueChange = { deviceType = it },
            label = { Text("Device Type") })
        TextField(
            value = deviceSN,
            onValueChange = { deviceSN = it },
            label = { Text("Serial Number") })
        TextField(
            value = deviceAssignee,
            onValueChange = { deviceAssignee = it },
            label = { Text("Assignee") })
        TextField(value = date, onValueChange = { date = it }, label = { Text("Date") })
        TextField(value = location, onValueChange = { location = it }, label = { Text("Location") })

        // QR Code Display
        if (qrCodeGenerated != null) {
            Image(
                bitmap = qrCodeGenerated!!.asImageBitmap(),
                contentDescription = "",
                modifier = Modifier.size(220.dp)
            )
        }

        // Button to Generate QR and Save to DB
        Button(onClick = {
            val qrData = "$deviceType\n$deviceSN\n$deviceAssignee\n$date\n$location"
            qrCodeGenerated = generateQrCode(qrData)
            qrCodeGenerated?.let {
                val qrBytes = bitmapToByteArray(it)
                val deviceQrCode = DeviceQrs(
                    deviceType = deviceType,
                    deviceSN = deviceSN,
                    deviceAssignee = deviceAssignee,
                    date = date,
                    location = location,
                    deviceQr = qrBytes
                )
                viewModel.addDeviceQr(deviceQrCode)
            }
        }) {
            Text("Generate & Save QR Code")
        }
    }
}

fun bitmapToByteArray(bitmap: Bitmap): ByteArray {
    val stream = ByteArrayOutputStream()
    bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream)
    return stream.toByteArray()
}
